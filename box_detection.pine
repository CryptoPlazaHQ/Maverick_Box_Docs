//@version=5
indicator("Maverick Box ML Detection", overlay=true, max_boxes_count=500, max_lines_count=500)

// ==================
// Type Definitions
// ==================

type BoxFeatures
    float height
    float width
    float volume_profile
    float price_volatility
    float trend_strength
    float momentum
    float support_resistance_context

type BoxMetadata
    int start_time
    int end_time
    string pattern_type
    float confidence

type BoxData
    box boxObject
    BoxFeatures features
    BoxMetadata metadata

// ==================
// Input Parameters
// ==================

i_lookback = input.int(3, "Contraction Period", minval=2, maxval=20)
i_volThresh = input.float(0.8, "Volume Threshold", minval=0.5, maxval=2.0, step=0.1)
i_boxColor = input.color(color.rgb(41, 98, 255, 80), "Box Color")
i_midColor = input.color(color.rgb(255, 23, 68, 0), "Mid Line Color")
i_exportData = input.bool(true, "Export Features", group="ML Settings")
i_confidenceThresh = input.float(0.75, "Confidence Threshold", minval=0.5, maxval=1.0, group="ML Settings")

// ==================
// Memory Management
// ==================

// Efficient array initialization
var boxArray = array.new<box>()
var featuresArray = array.new<BoxFeatures>()
var metadataArray = array.new<BoxMetadata>()

// Memory cleanup function
cleanupArrays() =>
    if array.size(boxArray) > 450  // Keep under 500 limit with buffer
        box.delete(array.shift(boxArray))
        array.shift(featuresArray)
        array.shift(metadataArray)

// ==================
// Feature Calculation
// ==================

calculateVolumeProfile(lookback) =>
    float volMA = ta.sma(volume, lookback)
    float volStd = ta.stdev(volume, lookback)
    float relativeVol = volume / volMA
    math.normalize(relativeVol, 0, 1)

calculatePriceVolatility(lookback) =>
    float atr = ta.atr(lookback)
    float normalizedATR = atr / close
    math.normalize(normalizedATR, 0, 1)

calculateTrendStrength(lookback) =>
    float adx = ta.adx(lookback)
    math.normalize(adx, 0, 100)

calculateMomentum(lookback) =>
    float rsi = ta.rsi(close, lookback)
    float macd = ta.macd(close, 12, 26, 9)[1]
    float momentum = (rsi + math.abs(macd)) / 2
    math.normalize(momentum, 0, 100)

calculateSR_Context(lookback) =>
    float pivot = (high + low + close) / 3
    float sr_level = ta.sma(pivot, lookback)
    float distance = math.abs(close - sr_level) / close
    math.normalize(distance, 0, 1)

// ==================
// Box Detection Logic
// ==================

detectContraction(src_high, src_low) =>
    len = array.size(src_high)
    isValidContraction = true
    if len > 1
        for i = 1 to len - 1
            if array.get(src_high, i) > array.get(src_high, i-1) or array.get(src_low, i) < array.get(src_low, i-1)
                isValidContraction := false
    [isValidContraction, array.max(src_high), array.min(src_low)]

isVolumeValid() =>
    volMA = ta.sma(volume, 20)
    volCheck = volume < volMA * i_volThresh
    volStdev = ta.stdev(volume, i_lookback) < ta.stdev(volume, i_lookback * 2)
    volCheck and volStdev

// ==================
// Feature Extraction
// ==================

extractBoxFeatures(boxHigh, boxLow, boxStart) =>
    BoxFeatures.new(
        height = (boxHigh - boxLow) / boxLow, // Normalized height
        width = bar_index - boxStart,
        volume_profile = calculateVolumeProfile(i_lookback),
        price_volatility = calculatePriceVolatility(i_lookback),
        trend_strength = calculateTrendStrength(14),
        momentum = calculateMomentum(14),
        support_resistance_context = calculateSR_Context(20)
    )

extractBoxMetadata(start_time) =>
    BoxMetadata.new(
        start_time = start_time,
        end_time = time,
        pattern_type = "", // To be filled by ML model
        confidence = 0.0   // To be filled by ML model
    )

// ==================
// Data Export
// ==================

exportFeatures(features, metadata) =>
    if i_exportData
        label.new(
            bar_index, high,
            text = str.format(
                "BOX_FEATURES:{0},{1},{2},{3},{4},{5},{6},{7},{8}",
                str.tostring(features.height),
                str.tostring(features.width),
                str.tostring(features.volume_profile),
                str.tostring(features.price_volatility),
                str.tostring(features.trend_strength),
                str.tostring(features.momentum),
                str.tostring(features.support_resistance_context),
                str.tostring(metadata.start_time),
                str.tostring(metadata.end_time)
            ),
            style = label.style_none,
            textcolor = color.white
        )

// ==================
// Main Logic
// ==================

// Initialize price arrays
var highs = array.new_float()
var lows = array.new_float()

// Update price arrays
array.clear(highs)
array.clear(lows)
for i = 0 to i_lookback - 1
    array.push(highs, high[i])
    array.push(lows, low[i])

// Cleanup old drawings
cleanupArrays()

// Box detection
[isContraction, boxHigh, boxLow] = detectContraction(highs, lows)
boxMid = (boxHigh + boxLow) / 2

if isContraction and isVolumeValid()
    // Create new box
    newBox = box.new(
        left = bar_index - i_lookback + 1,
        right = bar_index,
        top = boxHigh,
        bottom = boxLow,
        border_color = i_boxColor,
        bgcolor = color.new(i_boxColor, 90),
        extend = extend.right
        )
    
    // Extract and store features
    features = extractBoxFeatures(boxHigh, boxLow, bar_index - i_lookback + 1)
    metadata = extractBoxMetadata(time[i_lookback - 1])
    
    // Store objects
    array.push(boxArray, newBox)
    array.push(featuresArray, features)
    array.push(metadataArray, metadata)
    
    // Export features for ML processing
    exportFeatures(features, metadata)

// ==================
// Plotting & Alerts
// ==================

if array.size(boxArray) > 0
    last_features = array.get(featuresArray, array.size(featuresArray) - 1)
    last_metadata = array.get(metadataArray, array.size(metadataArray) - 1)
    
    if i_exportData
        label.new(
            bar_index, low,
            text = "ML Features Exported",
            style = label.style_label_up,
            color = color.new(color.blue, 90),
            textcolor = color.white
        )

// Export performance metrics
plotchar(array.size(boxArray), "Active Boxes", "", location.top)
